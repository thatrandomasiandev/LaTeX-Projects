# Tower of Hanoi - Recursive solution with ASCII visualization
# This script accepts user input for the number of disks and calculates the steps needed
# to move the disks from Peg A to Peg C following the Tower of Hanoi rules.
# It displays each step and the current state of the towers in ASCII notation.

def print_towers(towers):
    """
    Displays the current state of the towers in ASCII.
    
    Parameters:
    towers (dict): A dictionary with keys 'A', 'B', 'C' representing pegs,
                   and values as lists representing disks on each peg.
    """
    max_height = max(len(peg) for peg in towers.values())
    for level in reversed(range(max_height)):
        for peg in ['A', 'B', 'C']:
            if level < len(towers[peg]):
                # Print the disk number at the current level of the peg
                print(f" {towers[peg][level]} ", end="\t")
            else:
                # Print a vertical bar if no disk is present at this level
                print(" | ", end="\t")
        print()
    print(" A \t B \t C ")
    print("-" * 24)

def hanoi(n, source, target, auxiliary, towers):
    """
    Recursive function to solve Tower of Hanoi problem.
    
    Parameters:
    n (int): Number of disks to move.
    source (str): The peg to move disks from.
    target (str): The peg to move disks to.
    auxiliary (str): The peg used as auxiliary storage.
    towers (dict): The current state of the towers.
    """
    if n == 1:
        # Move the top disk from source to target
        disk = towers[source].pop()
        towers[target].append(disk)
        print(f"Move disk 1 from {source} to {target}")
        print_towers(towers)
    else:
        # Move n-1 disks from source to auxiliary, so they are out of the way
        hanoi(n - 1, source, auxiliary, target, towers)
        # Move the nth disk from source to target
        disk = towers[source].pop()
        towers[target].append(disk)
        print(f"Move disk {n} from {source} to {target}")
        print_towers(towers)
        # Move the n-1 disks that we left on auxiliary to target
        hanoi(n - 1, auxiliary, target, source, towers)

def main():
    """
    Main function to run the Tower of Hanoi program.
    """
    print("Tower of Hanoi - Recursive with ASCII Visualization")
    n = int(input("Enter number of disks: "))
    # Initialize towers with disks on peg A, and pegs B and C empty
    towers = {
        'A': list(reversed(range(1, n + 1))),
        'B': [],
        'C': []
    }
    
    print("Initial State:")
    print_towers(towers)
    # Start the recursive solution
    hanoi(n, 'A', 'C', 'B', towers)

if __name__ == "__main__":
    main()
